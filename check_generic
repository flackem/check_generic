#!/usr/bin/perl -w
#
# check_generic - nagios plugin
#
# Copyright (c) 2007 Matthias Flacke (matthias.flacke at gmx.de)
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#
# TODO
# - performance output, how to gather?
#
#
# $Id$
#
#nagios: -epn
#
use strict;
use Getopt::Long qw(:config no_ignore_case bundling);
BEGIN { eval("use Time::HiRes qw(time)") }
use lib "/usr/local/nagios/libexec";
use vars qw(
$MYSELF %opt %cmds %rc $command $returncode $no
$VERSION $OK $WARNING $CRITICAL $UNKNOWN 
$DETAIL_LIST $DETAIL_RC $DETAIL_STDERR $DETAIL_PERFORMANCE
);

#-------------------------------------------------------------------------------
#--- vars ----------------------------------------------------------------------
#-------------------------------------------------------------------------------
$MYSELF="check_generic";
$VERSION='$Revision$ $Date$ $Author$';
#
#--- RC defines
$OK=0;
$WARNING=1;
$CRITICAL=2;
$UNKNOWN=3;
#
#--- report defines
$DETAIL_LIST=1;
$DETAIL_RC=2;
$DETAIL_STDERR=4;
$DETAIL_PERFORMANCE=8;
#
#--- vars
$no=0;
%cmds=();
%rc=(
	label	=> { $OK => "OK", $WARNING => "WARNING", $CRITICAL => "CRITICAL", $UNKNOWN => "UNKNOWN", },
	number	=> { "OK" => $OK, "WARNING" => $WARNING, "CRITICAL" => $CRITICAL, "UNKNOWN" => $UNKNOWN, 
                     "ok" => $OK, "warning" => $WARNING, "critical" => $CRITICAL, "unknown" => $UNKNOWN,
                      "o" => $OK,  "w"      => $WARNING, "c"        => $CRITICAL, "u"       => $UNKNOWN, },
	s2r	=> { 0 => $OK, 2 => $WARNING, 3 => $CRITICAL, 1 => $UNKNOWN, },
	r2s	=> { $OK => 0, $WARNING => 2, $CRITICAL => 3, $UNKNOWN => 1, },
	complement => { $OK => $CRITICAL, $WARNING => $OK, $CRITICAL => $OK, $UNKNOWN => $OK, },
	minimum => { $OK => 0, $WARNING => 1, $CRITICAL => 1, $UNKNOWN => 1, },
	maximum => { $OK => 0, $WARNING => 1, $CRITICAL => 1, $UNKNOWN => 1, },
	list	=> { $OK => [],$WARNING => [],$CRITICAL => [],$UNKNOWN => [], },
	textsev	=> ["ok","unknown","warning","critical"],
	top	=> $OK,
	error	=> [ ],
	starttime => 0.0,
	endtime => 0.0,
);

my %opt=(
	"configfile"	=> "",
	"libexec"	=> "/usr/local/nagios/libexec",
	"name"		=> "CHANGEME",
	"report"	=> 15,
	"timeout"	=> 10,
	"TIMEOUT"	=> 60,
	"verbose"	=> 0,
	"string"	=> {},
	#"ok"		=> "0:0",
	#"warning"	=> "1:1",
	#"critical"	=> "1:1",
	#"unknown"	=> "1:1",
);
	
#-------------------------------------------------------------------------------
#--- subs ----------------------------------------------------------------------
#-------------------------------------------------------------------------------

sub process_parameters {

	if (! GetOptions(
		"c|critical=s"	=> \$opt{critical},
		"e|execute=s"	=> \$opt{execute},
		"h|help"	=> \$opt{help},
		"n|name=s"	=> \$opt{name},
		"o|ok=s"	=> \$opt{ok},
		"r|report:i"	=> \$opt{report},
		"f|false=s"	=> \$opt{false},
		"t|timeout=i"	=> \$opt{timeout},
		"u|unknown=s"	=> \$opt{unknown},
		"v|verbose+"	=> \$opt{verbose},
		"V|version"	=> \$opt{version},
		"w|warning=s"	=> \$opt{warning},)
	) {
		short_usage();
        	return $UNKNOWN;
	}

	if ($opt{version}) {
		print "$MYSELF: v$VERSION\n";
        	return $UNKNOWN;
	}
	if ($opt{help}) {
		short_usage();
        	long_usage();
        	return $UNKNOWN;
	}
	if (!$opt{execute}) {
        	print "$MYSELF error: no commandline specified\n";
		short_usage();
        	return $UNKNOWN;
	}
	if (!$opt{ok} && !$opt{warning} && !$opt{critical} && !$opt{unknown}) {
        	print "$MYSELF error: no comparison expression specified\n";
		short_usage();
        	return $UNKNOWN;
	} else {
		foreach my $state (reverse @{$rc{textsev}}) {
			if (defined($opt{$state})) {
				$opt{string}{$state}=is_string_cmp($opt{$state});
				debug(3,"process_parameters: state $state defined:$opt{$state}, text comparison:$opt{string}{$state}");
			} else {
				debug(3,"process_parameters: state $state not defined");
			}
		}
	}
	if ($opt{false} && (
		$opt{false} ne "o" && $opt{false} ne "OK" &&
		$opt{false} ne "u" && $opt{false} ne "UNKNOWN" &&
		$opt{false} ne "w" && $opt{false} ne "WARNING" &&
		$opt{false} ne "c" && $opt{false} ne "CRITICAL")) {
		print "$MYSELF error: unknown false $opt{false}, should be u|UNKNOWN w|WARNING c|critical o|OK\n";
                short_usage();
                return $UNKNOWN;
	}
	while (!defined($opt{false})) {
		foreach my $state (reverse @{$rc{textsev}}) {
			#print "DEBUG:state:$state opt{state}:$opt{$state}\n";
			if (defined($opt{$state})) {
				$opt{false}=$rc{label}{$rc{complement}{$rc{number}{$state}}};
				last;
			}
		}
	}
	debug(2, "verbosity:$opt{verbose}");
	return $OK;
}

sub short_usage {
print <<SHORTEOF;

$MYSELF -e <cmdline> -o|u|w|c <expression> [-f false_state] [-n name] [-t timeout] [-r level]
$MYSELF [-h | --help]
$MYSELF [-V | --version]
SHORTEOF
}

sub long_usage {
print <<LONGEOF;

Options:
-e, --execute <cmdline>
   string which contains commands to be executed
   (can be a complete filter chain)
-u|w|c|o, --unknown,warning,critical,ok <expression>
   operator is perl operators, e.g.
      '= n'	- numerically equal
      '< n'	- numerically equal
      '> n'	- numerically equal
      'eq s'	- string equal
      'ne s'	- string non equal
      '=~/s/	- pattern matching
   default: CRITICAL
-f, --false [u|UNKNOWN|w|WARNING|c|CRITICAL|o|OK]
   which state the plugin should become if the expression is false
   default: complement of state
-y, --type [SCALAR,ARRAY,DELTA]
   type of data value
-n, --name
   plugin name (shown in output), default: $opt{name}
-t, --timeout
   timeout for one command, default: $opt{timeout}
-v, --verbose
   increase verbosity (can be called multiple)
-h, --help
   print detailed help screen
-V, --version
   print version information
LONGEOF

#-s, --state [u|UNKNOWN|w|WARNING|c|CRITICAL|o|OK]
#   which state the plugin should become if the expression is true
#-r, --report <level>
#  specify level of details in output (level is binary coded, just add all options)
#   default: $opt{report}
#      1: mention service names in plugin_output, e.g.
#         "24 plugins checked, 1 critical (http), 0 warning, 0 unknown, 23 ok"
#      2: show STATE in front of each line of plugin output, e.g.
#         "[16] OK system_ssh - SSH OK - OpenSSH_4.4 (protocol 1.99)"
#      4: show STDERR (if any) in each line of plugin output
#      8: show performance data
}

#---
#--- debug output routine
#---
sub debug {
	my ($level,$message)=@_;
	print "$message\n" if ($level <= $opt{verbose});
}

#---
#--- read file and return its contents
#---
sub readfile {
        my ($filename)=@_;
        open(FILE,$filename) || add_error("readfile: error opening $filename:$!") && return "";
        my @lines=<FILE>;
        close(FILE);
        return join("", @lines);
}

#---
#--- check if expression is string comparison
#---
sub is_string_cmp {
	my $expression=shift;
	my %stringop=('lt','gt','le','ge','=~','!~','eq','ne');
	foreach my $key (keys(%stringop)) {
		return 1 if ($expression=~/^\s*$key/);
	}
	return 0;
}

#---
#--- taken from Perl Cookbook ;-)
#---
sub is_valid_pattern {
    my $pat = shift;
    return eval { "" =~ /$pat/; 1 } || 0;
}

#---
#--- trim input string if found any chars from trim string
#---
sub mytrim {
	my ($src, $trim)=@_;
	return ($src=~/[$trim]*(.*)[$trim]*/) ? $1 : $src;
}

#---
#--- substitute macros a la $HOSTNAME$ from environment
#---
sub substitute_macros {
        my ($input)=@_;
        while ((my $var)=($input=~/\$([A-Z0-9^\$]+)\$/)) {
                $input=~s/\$$var\$/$ENV{"NAGIOS_$var"}/g;
        }
        return $input;
}

#---
#--- add error(s) to global error list
#---
sub add_error {
	push @{$rc{error}}, @_;
}

#---
#--- create unique tmpfile and try to create it
#---
sub get_tmpfile {
	my ($path,$prefix)=@_;
	my $attempt=0;
	my $tmpfile="";
	#--- check existance of path and create it if necessary
	if (! -d $path && ! mkdir($path,0700)) {
		add_error("get_tmpfile: error creating tmp_path $path:$!");
		return "";
	}
	#--- do 5 attempts to create tmpfile
	while ($attempt++ < 5) {
		my $suffix=int(rand(89999))+10000;
		$tmpfile="$path/$prefix.$suffix";
		next if (-f $tmpfile);
		if (open(TMP,">$tmpfile")) {
			close TMP;
			return $tmpfile;
		}
	}
	add_error("get_tmpfile: giving up opening $tmpfile after $attempt attempts:$!");
	return "";
}

#---
#--- execute $command, return result in %cmds 
#---
sub exec_command {
	my ($no)=@_;
	my $tmp_stdout="";
	my $tmp_stderr="";

	#--- execute command with alarm timer to catch timeouts
	$SIG{'ALRM'} = sub { die "timeout" };
	eval {
		alarm($opt{timeout});

		#--- prepare tmpfiles for stdout and stderr
		$tmp_stdout=&get_tmpfile("/tmp", "${MYSELF}_stdout_$$");
		$tmp_stderr=&get_tmpfile("/tmp", "${MYSELF}_stderr_$$");

		#--- execute command and store stdout/stderr/return code
		`$cmds{$no}{command} 1>$tmp_stdout 2>$tmp_stderr`;
		$cmds{$no}{rc}=$? >> 8;

		#--- store stdout/stderr and cleanup tmpfiles
		$cmds{$no}{output}=readfile($tmp_stdout);
		$cmds{$no}{stderr}=readfile($tmp_stderr);
		unlink $tmp_stdout, $tmp_stderr;
		#debug(1, "exec_command: output:>$cmds{$no}{output}< stderr:>$cmds{$no}{stderr}<n");

		#--- unknown return code? change it explicitly to UNKNOWN
		if (!defined($rc{r2s}{$cmds{$no}{rc}})) {
			$cmds{$no}{stderr}.=" RC was $cmds{no}{rc}!";
			$cmds{$no}{rc}=$UNKNOWN;
		}
		
		#--- remove white chars from output
		#$cmds{$no}{output}=mytrim($cmds{$no}{output},"\\n\\s");
		#$cmds{$no}{stderr}=mytrim($cmds{$no}{stderr},"\\n\\s");

		#print "DEBUG output:>$cmds{$no}{output}< stderr:>$cmds{$no}{stderr}<n";

		alarm(0);
	};
	
	#--- any oddities during command execution?
	if ($@) {
		#--- timeout encountered: store status
		if ($@ =~ /timeout/) {
			$cmds{$no}{output}="UNKNOWN - \'$command\' cancelled after timeout ($opt{timeout}s)";
			$cmds{$no}{rc}=$UNKNOWN;
		#--- catchall for unknown errors
		} else {
			alarm(0);
       			die "$MYSELF: unexpected exception encountered:$@";
		}
		unlink $tmp_stdout, $tmp_stderr;
	}
	return $cmds{$no}{rc};
}

#---
#--- analyze results stored in %cmds
#---
sub do_analysis {
	my ($no)=@_;
	#debug(2,"do_analysis: state:$opt{state} false:$opt{false} number{false}:($rc{number}{$opt{false}})");
	my $returncode=$rc{number}{$opt{false}};

	#--- first: check return code
	if ($cmds{$no}{rc} != 0) {
		print "$opt{name} UNKNOWN - cmd $cmds{$no}{command}: $cmds{$no}{output} [$cmds{$no}{stderr}]\n";
		return $UNKNOWN;
	}

	$cmds{$no}{match}="no";
	foreach my $severity (@{$rc{textsev}}) {
		if (defined($opt{$severity})) {
			debug(2,"do_analysis: compare \'$cmds{$no}{output}\' <-> \'$opt{$severity}\'");
			if (eval("\'$cmds{$no}{output}\'$opt{$severity}")) {
				$cmds{$no}{match}=$opt{$severity};
				$returncode=$rc{number}{$severity};
				debug(2,"do_analysis: eval successful rc:$returncode match:\'$cmds{$no}{match}\'");
			} else {
				debug(2,"do_analysis: eval *not* successful rc:$returncode expression:\'$cmds{$no}{output}\'$opt{$severity}");
			}
		}
	}
	return $returncode;
}
#-------------------------------------------------------------------------------
#--- main ----------------------------------------------------------------------
#-------------------------------------------------------------------------------

#--- parse command line options
exit $UNKNOWN if (&process_parameters != $OK);

#--- initialize timer for overall timeout
$rc{starttime}=time;
$rc{endtime}=$rc{starttime} + $opt{TIMEOUT};

#--- fetch command
$no=1;
$cmds{$no}{command}=$opt{execute};
$cmds{$no}{name}=$opt{execute};

#--- execute command
&exec_command($no);

#--- report results
$rc{rc}=&do_analysis($no);
printf "%s %s - output:%s, matched:%s\n",
	$opt{name},
	$rc{label}{$rc{rc}},
	substr(mytrim($cmds{$no}{output},"\\n\\s"),0,80),
	$cmds{$no}{match};

#--- return rc with highest severity
exit $rc{rc};
